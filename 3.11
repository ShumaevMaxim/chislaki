#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
using namespace std;

double f(double x) {
    return x * x * x - 6 * x * x + 11 * x - 6;
}

double df(double x) {
    return 3 * x * x - 12 * x + 11;
}

vector<double> hybridMethod(double a, double b, double eps) {
    vector<double> roots;
    bool foundRoot;

    if (f(a) * f(b) > 0) {
        cout << "Корни не существуют на заданном интервале." << endl;
        return roots;
    }

    double x0, x1, x2;
    int maxIterations = 100;

    for (double x = a; x <= b; x += eps) {
        foundRoot = false;


        x0 = x;
        for (int i = 0; i < maxIterations; i++) {
            x1 = x0 - f(x0) / df(x0);
            x2 = (x0 + x1) / 2;
            if (abs(f(x2)) < eps) {
                roots.push_back(x2);
                foundRoot = true;
                break;
            }
            x0 = x1;
        }


        if (!foundRoot) {
            double left = x - eps;
            double right = x;
            double mid;

            while (abs(right - left) > eps) {
                mid = (left + right) / 2;
                if (f(left) * f(mid) < 0) {
                    right = mid;
                }
                else {
                    left = mid;
                }
            }
            roots.push_back((left + right) / 2);
            break;
        }
    }
    return roots;
}

int main() {
    setlocale(LC_ALL, "Russian");
    double a = 1.0;
    double b = 10.0;
    double eps = 0.000001;

    vector<double> roots = hybridMethod(a, b, eps);

    if (roots.empty()) {
        cout << "На заданном интервале нет корней." << endl;
    }
    else {
        cout << "Найденные корни:";
        for (double root : roots) {
            cout << " " << root;
        }
        cout << endl;
    }

    return 0;
}
